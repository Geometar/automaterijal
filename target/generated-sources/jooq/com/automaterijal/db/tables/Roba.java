/*
 * This file is generated by jOOQ.
 */
package com.automaterijal.db.tables;


import com.automaterijal.db.AutomateOrders;
import com.automaterijal.db.Indexes;
import com.automaterijal.db.Keys;
import com.automaterijal.db.tables.records.RobaRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Roba extends TableImpl<RobaRecord> {

    private static final long serialVersionUID = 1633988855;

    /**
     * The reference instance of <code>automate_orders.roba</code>
     */
    public static final Roba ROBA = new Roba();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RobaRecord> getRecordType() {
        return RobaRecord.class;
    }

    /**
     * The column <code>automate_orders.roba.robaid</code>.
     */
    public final TableField<RobaRecord, Integer> ROBAID = createField(DSL.name("robaid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>automate_orders.roba.katbr</code>.
     */
    public final TableField<RobaRecord, String> KATBR = createField(DSL.name("katbr"), org.jooq.impl.SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>automate_orders.roba.katbrpro</code>.
     */
    public final TableField<RobaRecord, String> KATBRPRO = createField(DSL.name("katbrpro"), org.jooq.impl.SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>automate_orders.roba.naziv</code>.
     */
    public final TableField<RobaRecord, String> NAZIV = createField(DSL.name("naziv"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>automate_orders.roba.grupaid</code>.
     */
    public final TableField<RobaRecord, String> GRUPAID = createField(DSL.name("grupaid"), org.jooq.impl.SQLDataType.VARCHAR(6), this, "");

    /**
     * The column <code>automate_orders.roba.podgrupaid</code>.
     */
    public final TableField<RobaRecord, Integer> PODGRUPAID = createField(DSL.name("podgrupaid"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>automate_orders.roba.proid</code>.
     */
    public final TableField<RobaRecord, String> PROID = createField(DSL.name("proid"), org.jooq.impl.SQLDataType.VARCHAR(5), this, "");

    /**
     * The column <code>automate_orders.roba.stanje</code>.
     */
    public final TableField<RobaRecord, BigDecimal> STANJE = createField(DSL.name("stanje"), org.jooq.impl.SQLDataType.DECIMAL(15, 3).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.000", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>automate_orders.roba.fabrcena</code>.
     */
    public final TableField<RobaRecord, BigDecimal> FABRCENA = createField(DSL.name("fabrcena"), org.jooq.impl.SQLDataType.DECIMAL(15, 2).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>automate_orders.roba.devnabcena</code>.
     */
    public final TableField<RobaRecord, BigDecimal> DEVNABCENA = createField(DSL.name("devnabcena"), org.jooq.impl.SQLDataType.DECIMAL(15, 2).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>automate_orders.roba.porez</code>.
     */
    public final TableField<RobaRecord, BigDecimal> POREZ = createField(DSL.name("porez"), org.jooq.impl.SQLDataType.DECIMAL(5, 2).defaultValue(org.jooq.impl.DSL.inline("18.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>automate_orders.roba.komentar</code>.
     */
    public final TableField<RobaRecord, String> KOMENTAR = createField(DSL.name("komentar"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>automate_orders.roba.vpcid</code>.
     */
    public final TableField<RobaRecord, Short> VPCID = createField(DSL.name("vpcid"), org.jooq.impl.SQLDataType.SMALLINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>automate_orders.roba.procpc</code>.
     */
    public final TableField<RobaRecord, BigDecimal> PROCPC = createField(DSL.name("procpc"), org.jooq.impl.SQLDataType.DECIMAL(15, 2), this, "");

    /**
     * The column <code>automate_orders.roba.datum_dostup</code>.
     */
    public final TableField<RobaRecord, String> DATUM_DOSTUP = createField(DSL.name("datum_dostup"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>automate_orders.roba.gkid</code>.
     */
    public final TableField<RobaRecord, String> GKID = createField(DSL.name("gkid"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>automate_orders.roba.slika</code>.
     */
    public final TableField<RobaRecord, String> SLIKA = createField(DSL.name("slika"), org.jooq.impl.SQLDataType.VARCHAR(24), this, "");

    /**
     * The column <code>automate_orders.roba.ngrupaid</code>.
     */
    public final TableField<RobaRecord, String> NGRUPAID = createField(DSL.name("ngrupaid"), org.jooq.impl.SQLDataType.VARCHAR(6), this, "");

    /**
     * The column <code>automate_orders.roba.nproid</code>.
     */
    public final TableField<RobaRecord, String> NPROID = createField(DSL.name("nproid"), org.jooq.impl.SQLDataType.VARCHAR(5), this, "");

    /**
     * Create a <code>automate_orders.roba</code> table reference
     */
    public Roba() {
        this(DSL.name("roba"), null);
    }

    /**
     * Create an aliased <code>automate_orders.roba</code> table reference
     */
    public Roba(String alias) {
        this(DSL.name(alias), ROBA);
    }

    /**
     * Create an aliased <code>automate_orders.roba</code> table reference
     */
    public Roba(Name alias) {
        this(alias, ROBA);
    }

    private Roba(Name alias, Table<RobaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Roba(Name alias, Table<RobaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Roba(Table<O> child, ForeignKey<O, RobaRecord> key) {
        super(child, key, ROBA);
    }

    @Override
    public Schema getSchema() {
        return AutomateOrders.AUTOMATE_ORDERS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ROBA_IDXCENE, Indexes.ROBA_IDXGRUPA2, Indexes.ROBA_IDXKATBR2, Indexes.ROBA_IDXNAZIV, Indexes.ROBA_IDXPRO, Indexes.ROBA_IDXSTANJE, Indexes.ROBA_PRIMARY);
    }

    @Override
    public UniqueKey<RobaRecord> getPrimaryKey() {
        return Keys.KEY_ROBA_PRIMARY;
    }

    @Override
    public List<UniqueKey<RobaRecord>> getKeys() {
        return Arrays.<UniqueKey<RobaRecord>>asList(Keys.KEY_ROBA_PRIMARY);
    }

    @Override
    public Roba as(String alias) {
        return new Roba(DSL.name(alias), this);
    }

    @Override
    public Roba as(Name alias) {
        return new Roba(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Roba rename(String name) {
        return new Roba(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Roba rename(Name name) {
        return new Roba(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Integer, String, String, String, String, Integer, String, BigDecimal, BigDecimal, BigDecimal, BigDecimal, String, Short, BigDecimal, String, String, String, String, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
