/*
 * This file is generated by jOOQ.
 */
package com.automaterijal.db.tables;


import com.automaterijal.db.AutomateOrders;
import com.automaterijal.db.Indexes;
import com.automaterijal.db.Keys;
import com.automaterijal.db.tables.records.ArtikalSlikaRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArtikalSlika extends TableImpl<ArtikalSlikaRecord> {

    private static final long serialVersionUID = 615329653;

    /**
     * The reference instance of <code>automate_orders.artikal_slika</code>
     */
    public static final ArtikalSlika ARTIKAL_SLIKA = new ArtikalSlika();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArtikalSlikaRecord> getRecordType() {
        return ArtikalSlikaRecord.class;
    }

    /**
     * The column <code>automate_orders.artikal_slika.id</code>.
     */
    public final TableField<ArtikalSlikaRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>automate_orders.artikal_slika.robaid</code>.
     */
    public final TableField<ArtikalSlikaRecord, Integer> ROBAID = createField(DSL.name("robaid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>automate_orders.artikal_slika.slika</code>.
     */
    public final TableField<ArtikalSlikaRecord, String> SLIKA = createField(DSL.name("slika"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>automate_orders.artikal_slika.ord</code>.
     */
    public final TableField<ArtikalSlikaRecord, String> ORD = createField(DSL.name("ord"), org.jooq.impl.SQLDataType.VARCHAR(2), this, "");

    /**
     * Create a <code>automate_orders.artikal_slika</code> table reference
     */
    public ArtikalSlika() {
        this(DSL.name("artikal_slika"), null);
    }

    /**
     * Create an aliased <code>automate_orders.artikal_slika</code> table reference
     */
    public ArtikalSlika(String alias) {
        this(DSL.name(alias), ARTIKAL_SLIKA);
    }

    /**
     * Create an aliased <code>automate_orders.artikal_slika</code> table reference
     */
    public ArtikalSlika(Name alias) {
        this(alias, ARTIKAL_SLIKA);
    }

    private ArtikalSlika(Name alias, Table<ArtikalSlikaRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArtikalSlika(Name alias, Table<ArtikalSlikaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ArtikalSlika(Table<O> child, ForeignKey<O, ArtikalSlikaRecord> key) {
        super(child, key, ARTIKAL_SLIKA);
    }

    @Override
    public Schema getSchema() {
        return AutomateOrders.AUTOMATE_ORDERS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ARTIKAL_SLIKA_IDXROBA, Indexes.ARTIKAL_SLIKA_PRIMARY);
    }

    @Override
    public Identity<ArtikalSlikaRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ARTIKAL_SLIKA;
    }

    @Override
    public UniqueKey<ArtikalSlikaRecord> getPrimaryKey() {
        return Keys.KEY_ARTIKAL_SLIKA_PRIMARY;
    }

    @Override
    public List<UniqueKey<ArtikalSlikaRecord>> getKeys() {
        return Arrays.<UniqueKey<ArtikalSlikaRecord>>asList(Keys.KEY_ARTIKAL_SLIKA_PRIMARY, Keys.KEY_ARTIKAL_SLIKA_IDXROBA);
    }

    @Override
    public ArtikalSlika as(String alias) {
        return new ArtikalSlika(DSL.name(alias), this);
    }

    @Override
    public ArtikalSlika as(Name alias) {
        return new ArtikalSlika(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArtikalSlika rename(String name) {
        return new ArtikalSlika(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArtikalSlika rename(Name name) {
        return new ArtikalSlika(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
