/*
 * This file is generated by jOOQ.
 */
package com.automaterijal.db.tables;


import com.automaterijal.db.AutomateOrders;
import com.automaterijal.db.Indexes;
import com.automaterijal.db.Keys;
import com.automaterijal.db.tables.records.PartnerB2bIdRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PartnerB2bId extends TableImpl<PartnerB2bIdRecord> {

    private static final long serialVersionUID = -1420996435;

    /**
     * The reference instance of <code>automate_orders.partner_b2b_id</code>
     */
    public static final PartnerB2bId PARTNER_B2B_ID = new PartnerB2bId();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PartnerB2bIdRecord> getRecordType() {
        return PartnerB2bIdRecord.class;
    }

    /**
     * The column <code>automate_orders.partner_b2b_id.ppid</code>.
     */
    public final TableField<PartnerB2bIdRecord, Integer> PPID = createField(DSL.name("ppid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>automate_orders.partner_b2b_id.uuid</code>.
     */
    public final TableField<PartnerB2bIdRecord, String> UUID = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>automate_orders.partner_b2b_id</code> table reference
     */
    public PartnerB2bId() {
        this(DSL.name("partner_b2b_id"), null);
    }

    /**
     * Create an aliased <code>automate_orders.partner_b2b_id</code> table reference
     */
    public PartnerB2bId(String alias) {
        this(DSL.name(alias), PARTNER_B2B_ID);
    }

    /**
     * Create an aliased <code>automate_orders.partner_b2b_id</code> table reference
     */
    public PartnerB2bId(Name alias) {
        this(alias, PARTNER_B2B_ID);
    }

    private PartnerB2bId(Name alias, Table<PartnerB2bIdRecord> aliased) {
        this(alias, aliased, null);
    }

    private PartnerB2bId(Name alias, Table<PartnerB2bIdRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PartnerB2bId(Table<O> child, ForeignKey<O, PartnerB2bIdRecord> key) {
        super(child, key, PARTNER_B2B_ID);
    }

    @Override
    public Schema getSchema() {
        return AutomateOrders.AUTOMATE_ORDERS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PARTNER_B2B_ID_PRIMARY);
    }

    @Override
    public UniqueKey<PartnerB2bIdRecord> getPrimaryKey() {
        return Keys.KEY_PARTNER_B2B_ID_PRIMARY;
    }

    @Override
    public List<UniqueKey<PartnerB2bIdRecord>> getKeys() {
        return Arrays.<UniqueKey<PartnerB2bIdRecord>>asList(Keys.KEY_PARTNER_B2B_ID_PRIMARY);
    }

    @Override
    public PartnerB2bId as(String alias) {
        return new PartnerB2bId(DSL.name(alias), this);
    }

    @Override
    public PartnerB2bId as(Name alias) {
        return new PartnerB2bId(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PartnerB2bId rename(String name) {
        return new PartnerB2bId(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PartnerB2bId rename(Name name) {
        return new PartnerB2bId(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
