/*
 * This file is generated by jOOQ.
 */
package com.automaterijal.db.tables;


import com.automaterijal.db.AutomateOrders;
import com.automaterijal.db.Indexes;
import com.automaterijal.db.Keys;
import com.automaterijal.db.tables.records.TecdocBrandsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TecdocBrands extends TableImpl<TecdocBrandsRecord> {

    private static final long serialVersionUID = -972572997;

    /**
     * The reference instance of <code>automate_orders.tecdoc_brands</code>
     */
    public static final TecdocBrands TECDOC_BRANDS = new TecdocBrands();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TecdocBrandsRecord> getRecordType() {
        return TecdocBrandsRecord.class;
    }

    /**
     * The column <code>automate_orders.tecdoc_brands.proid</code>.
     */
    public final TableField<TecdocBrandsRecord, String> PROID = createField(DSL.name("proid"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>automate_orders.tecdoc_brands.brand_id</code>.
     */
    public final TableField<TecdocBrandsRecord, Integer> BRAND_ID = createField(DSL.name("brand_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>automate_orders.tecdoc_brands.brand_logo_id</code>.
     */
    public final TableField<TecdocBrandsRecord, String> BRAND_LOGO_ID = createField(DSL.name("brand_logo_id"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>automate_orders.tecdoc_brands.brand</code>.
     */
    public final TableField<TecdocBrandsRecord, byte[]> BRAND = createField(DSL.name("brand"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * Create a <code>automate_orders.tecdoc_brands</code> table reference
     */
    public TecdocBrands() {
        this(DSL.name("tecdoc_brands"), null);
    }

    /**
     * Create an aliased <code>automate_orders.tecdoc_brands</code> table reference
     */
    public TecdocBrands(String alias) {
        this(DSL.name(alias), TECDOC_BRANDS);
    }

    /**
     * Create an aliased <code>automate_orders.tecdoc_brands</code> table reference
     */
    public TecdocBrands(Name alias) {
        this(alias, TECDOC_BRANDS);
    }

    private TecdocBrands(Name alias, Table<TecdocBrandsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TecdocBrands(Name alias, Table<TecdocBrandsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TecdocBrands(Table<O> child, ForeignKey<O, TecdocBrandsRecord> key) {
        super(child, key, TECDOC_BRANDS);
    }

    @Override
    public Schema getSchema() {
        return AutomateOrders.AUTOMATE_ORDERS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TECDOC_BRANDS_PRIMARY);
    }

    @Override
    public UniqueKey<TecdocBrandsRecord> getPrimaryKey() {
        return Keys.KEY_TECDOC_BRANDS_PRIMARY;
    }

    @Override
    public List<UniqueKey<TecdocBrandsRecord>> getKeys() {
        return Arrays.<UniqueKey<TecdocBrandsRecord>>asList(Keys.KEY_TECDOC_BRANDS_PRIMARY);
    }

    @Override
    public TecdocBrands as(String alias) {
        return new TecdocBrands(DSL.name(alias), this);
    }

    @Override
    public TecdocBrands as(Name alias) {
        return new TecdocBrands(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TecdocBrands rename(String name) {
        return new TecdocBrands(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TecdocBrands rename(Name name) {
        return new TecdocBrands(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, Integer, String, byte[]> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
