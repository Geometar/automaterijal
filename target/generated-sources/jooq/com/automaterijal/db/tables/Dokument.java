/*
 * This file is generated by jOOQ.
 */
package com.automaterijal.db.tables;


import com.automaterijal.db.AutomateOrders;
import com.automaterijal.db.Indexes;
import com.automaterijal.db.Keys;
import com.automaterijal.db.tables.records.DokumentRecord;

import java.math.BigDecimal;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dokument extends TableImpl<DokumentRecord> {

    private static final long serialVersionUID = 797107685;

    /**
     * The reference instance of <code>automate_orders.dokument</code>
     */
    public static final Dokument DOKUMENT = new Dokument();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DokumentRecord> getRecordType() {
        return DokumentRecord.class;
    }

    /**
     * The column <code>automate_orders.dokument.vrdok</code>.
     */
    public final TableField<DokumentRecord, Short> VRDOK = createField(DSL.name("vrdok"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>automate_orders.dokument.brdok</code>.
     */
    public final TableField<DokumentRecord, Integer> BRDOK = createField(DSL.name("brdok"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>automate_orders.dokument.ppid</code>.
     */
    public final TableField<DokumentRecord, Integer> PPID = createField(DSL.name("ppid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>automate_orders.dokument.datum</code>.
     */
    public final TableField<DokumentRecord, Date> DATUM = createField(DSL.name("datum"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>automate_orders.dokument.datroka</code>.
     */
    public final TableField<DokumentRecord, Date> DATROKA = createField(DSL.name("datroka"), org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>automate_orders.dokument.ulaz</code>.
     */
    public final TableField<DokumentRecord, BigDecimal> ULAZ = createField(DSL.name("ulaz"), org.jooq.impl.SQLDataType.DECIMAL(15, 2).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>automate_orders.dokument.izlaz</code>.
     */
    public final TableField<DokumentRecord, BigDecimal> IZLAZ = createField(DSL.name("izlaz"), org.jooq.impl.SQLDataType.DECIMAL(15, 2).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>automate_orders.dokument.stanje</code>.
     */
    public final TableField<DokumentRecord, BigDecimal> STANJE = createField(DSL.name("stanje"), org.jooq.impl.SQLDataType.DECIMAL(15, 2).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>automate_orders.dokument.opis</code>.
     */
    public final TableField<DokumentRecord, String> OPIS = createField(DSL.name("opis"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * Create a <code>automate_orders.dokument</code> table reference
     */
    public Dokument() {
        this(DSL.name("dokument"), null);
    }

    /**
     * Create an aliased <code>automate_orders.dokument</code> table reference
     */
    public Dokument(String alias) {
        this(DSL.name(alias), DOKUMENT);
    }

    /**
     * Create an aliased <code>automate_orders.dokument</code> table reference
     */
    public Dokument(Name alias) {
        this(alias, DOKUMENT);
    }

    private Dokument(Name alias, Table<DokumentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dokument(Name alias, Table<DokumentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Dokument(Table<O> child, ForeignKey<O, DokumentRecord> key) {
        super(child, key, DOKUMENT);
    }

    @Override
    public Schema getSchema() {
        return AutomateOrders.AUTOMATE_ORDERS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DOKUMENT_IDXPP, Indexes.DOKUMENT_PRIMARY);
    }

    @Override
    public UniqueKey<DokumentRecord> getPrimaryKey() {
        return Keys.KEY_DOKUMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<DokumentRecord>> getKeys() {
        return Arrays.<UniqueKey<DokumentRecord>>asList(Keys.KEY_DOKUMENT_PRIMARY);
    }

    @Override
    public Dokument as(String alias) {
        return new Dokument(DSL.name(alias), this);
    }

    @Override
    public Dokument as(Name alias) {
        return new Dokument(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dokument rename(String name) {
        return new Dokument(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dokument rename(Name name) {
        return new Dokument(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Short, Integer, Integer, Date, Date, BigDecimal, BigDecimal, BigDecimal, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
