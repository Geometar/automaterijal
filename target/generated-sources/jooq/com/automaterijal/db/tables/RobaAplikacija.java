/*
 * This file is generated by jOOQ.
 */
package com.automaterijal.db.tables;


import com.automaterijal.db.AutomateOrders;
import com.automaterijal.db.Indexes;
import com.automaterijal.db.Keys;
import com.automaterijal.db.tables.records.RobaAplikacijaRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RobaAplikacija extends TableImpl<RobaAplikacijaRecord> {

    private static final long serialVersionUID = 207621314;

    /**
     * The reference instance of <code>automate_orders.roba_aplikacija</code>
     */
    public static final RobaAplikacija ROBA_APLIKACIJA = new RobaAplikacija();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RobaAplikacijaRecord> getRecordType() {
        return RobaAplikacijaRecord.class;
    }

    /**
     * The column <code>automate_orders.roba_aplikacija.raid</code>.
     */
    public final TableField<RobaAplikacijaRecord, Integer> RAID = createField(DSL.name("raid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>automate_orders.roba_aplikacija.robaid</code>.
     */
    public final TableField<RobaAplikacijaRecord, Integer> ROBAID = createField(DSL.name("robaid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>automate_orders.roba_aplikacija.tipid</code>.
     */
    public final TableField<RobaAplikacijaRecord, Integer> TIPID = createField(DSL.name("tipid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>automate_orders.roba_aplikacija.opis</code>.
     */
    public final TableField<RobaAplikacijaRecord, String> OPIS = createField(DSL.name("opis"), org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>automate_orders.roba_aplikacija.etid</code>.
     */
    public final TableField<RobaAplikacijaRecord, Integer> ETID = createField(DSL.name("etid"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>automate_orders.roba_aplikacija.mcid</code>.
     */
    public final TableField<RobaAplikacijaRecord, Integer> MCID = createField(DSL.name("mcid"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>automate_orders.roba_aplikacija.kwid</code>.
     */
    public final TableField<RobaAplikacijaRecord, Integer> KWID = createField(DSL.name("kwid"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>automate_orders.roba_aplikacija.odid</code>.
     */
    public final TableField<RobaAplikacijaRecord, Integer> ODID = createField(DSL.name("odid"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>automate_orders.roba_aplikacija</code> table reference
     */
    public RobaAplikacija() {
        this(DSL.name("roba_aplikacija"), null);
    }

    /**
     * Create an aliased <code>automate_orders.roba_aplikacija</code> table reference
     */
    public RobaAplikacija(String alias) {
        this(DSL.name(alias), ROBA_APLIKACIJA);
    }

    /**
     * Create an aliased <code>automate_orders.roba_aplikacija</code> table reference
     */
    public RobaAplikacija(Name alias) {
        this(alias, ROBA_APLIKACIJA);
    }

    private RobaAplikacija(Name alias, Table<RobaAplikacijaRecord> aliased) {
        this(alias, aliased, null);
    }

    private RobaAplikacija(Name alias, Table<RobaAplikacijaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> RobaAplikacija(Table<O> child, ForeignKey<O, RobaAplikacijaRecord> key) {
        super(child, key, ROBA_APLIKACIJA);
    }

    @Override
    public Schema getSchema() {
        return AutomateOrders.AUTOMATE_ORDERS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ROBA_APLIKACIJA_PRIMARY, Indexes.ROBA_APLIKACIJA_ROBA_APLIKACIJAINDEX1);
    }

    @Override
    public UniqueKey<RobaAplikacijaRecord> getPrimaryKey() {
        return Keys.KEY_ROBA_APLIKACIJA_PRIMARY;
    }

    @Override
    public List<UniqueKey<RobaAplikacijaRecord>> getKeys() {
        return Arrays.<UniqueKey<RobaAplikacijaRecord>>asList(Keys.KEY_ROBA_APLIKACIJA_PRIMARY);
    }

    @Override
    public RobaAplikacija as(String alias) {
        return new RobaAplikacija(DSL.name(alias), this);
    }

    @Override
    public RobaAplikacija as(Name alias) {
        return new RobaAplikacija(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RobaAplikacija rename(String name) {
        return new RobaAplikacija(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RobaAplikacija rename(Name name) {
        return new RobaAplikacija(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, Integer, String, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
