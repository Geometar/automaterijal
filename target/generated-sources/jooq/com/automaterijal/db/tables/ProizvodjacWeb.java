/*
 * This file is generated by jOOQ.
 */
package com.automaterijal.db.tables;


import com.automaterijal.db.AutomateOrders;
import com.automaterijal.db.Indexes;
import com.automaterijal.db.Keys;
import com.automaterijal.db.tables.records.ProizvodjacWebRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProizvodjacWeb extends TableImpl<ProizvodjacWebRecord> {

    private static final long serialVersionUID = 265977021;

    /**
     * The reference instance of <code>automate_orders.proizvodjac_web</code>
     */
    public static final ProizvodjacWeb PROIZVODJAC_WEB = new ProizvodjacWeb();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProizvodjacWebRecord> getRecordType() {
        return ProizvodjacWebRecord.class;
    }

    /**
     * The column <code>automate_orders.proizvodjac_web.proid</code>.
     */
    public final TableField<ProizvodjacWebRecord, String> PROID = createField(DSL.name("proid"), org.jooq.impl.SQLDataType.VARCHAR(5).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>automate_orders.proizvodjac_web.ppid</code>.
     */
    public final TableField<ProizvodjacWebRecord, Integer> PPID = createField(DSL.name("ppid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>automate_orders.proizvodjac_web.upit</code>.
     */
    public final TableField<ProizvodjacWebRecord, Short> UPIT = createField(DSL.name("upit"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>automate_orders.proizvodjac_web.cena_za_kupca</code>.
     */
    public final TableField<ProizvodjacWebRecord, Short> CENA_ZA_KUPCA = createField(DSL.name("cena_za_kupca"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>automate_orders.proizvodjac_web.cena_proc</code>.
     */
    public final TableField<ProizvodjacWebRecord, BigDecimal> CENA_PROC = createField(DSL.name("cena_proc"), org.jooq.impl.SQLDataType.DECIMAL(7, 2), this, "");

    /**
     * The column <code>automate_orders.proizvodjac_web.cena_kurs</code>.
     */
    public final TableField<ProizvodjacWebRecord, BigDecimal> CENA_KURS = createField(DSL.name("cena_kurs"), org.jooq.impl.SQLDataType.DECIMAL(15, 3), this, "");

    /**
     * The column <code>automate_orders.proizvodjac_web.compid</code>.
     */
    public final TableField<ProizvodjacWebRecord, String> COMPID = createField(DSL.name("compid"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>automate_orders.proizvodjac_web.comp_ppid</code>.
     */
    public final TableField<ProizvodjacWebRecord, String> COMP_PPID = createField(DSL.name("comp_ppid"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>automate_orders.proizvodjac_web.aktivan</code>.
     */
    public final TableField<ProizvodjacWebRecord, Short> AKTIVAN = createField(DSL.name("aktivan"), org.jooq.impl.SQLDataType.SMALLINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * Create a <code>automate_orders.proizvodjac_web</code> table reference
     */
    public ProizvodjacWeb() {
        this(DSL.name("proizvodjac_web"), null);
    }

    /**
     * Create an aliased <code>automate_orders.proizvodjac_web</code> table reference
     */
    public ProizvodjacWeb(String alias) {
        this(DSL.name(alias), PROIZVODJAC_WEB);
    }

    /**
     * Create an aliased <code>automate_orders.proizvodjac_web</code> table reference
     */
    public ProizvodjacWeb(Name alias) {
        this(alias, PROIZVODJAC_WEB);
    }

    private ProizvodjacWeb(Name alias, Table<ProizvodjacWebRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProizvodjacWeb(Name alias, Table<ProizvodjacWebRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ProizvodjacWeb(Table<O> child, ForeignKey<O, ProizvodjacWebRecord> key) {
        super(child, key, PROIZVODJAC_WEB);
    }

    @Override
    public Schema getSchema() {
        return AutomateOrders.AUTOMATE_ORDERS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROIZVODJAC_WEB_PRIMARY);
    }

    @Override
    public UniqueKey<ProizvodjacWebRecord> getPrimaryKey() {
        return Keys.KEY_PROIZVODJAC_WEB_PRIMARY;
    }

    @Override
    public List<UniqueKey<ProizvodjacWebRecord>> getKeys() {
        return Arrays.<UniqueKey<ProizvodjacWebRecord>>asList(Keys.KEY_PROIZVODJAC_WEB_PRIMARY);
    }

    @Override
    public ProizvodjacWeb as(String alias) {
        return new ProizvodjacWeb(DSL.name(alias), this);
    }

    @Override
    public ProizvodjacWeb as(Name alias) {
        return new ProizvodjacWeb(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProizvodjacWeb rename(String name) {
        return new ProizvodjacWeb(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProizvodjacWeb rename(Name name) {
        return new ProizvodjacWeb(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, Integer, Short, Short, BigDecimal, BigDecimal, String, String, Short> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
