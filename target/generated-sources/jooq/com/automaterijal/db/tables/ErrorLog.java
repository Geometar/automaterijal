/*
 * This file is generated by jOOQ.
 */
package com.automaterijal.db.tables;


import com.automaterijal.db.AutomateOrders;
import com.automaterijal.db.Indexes;
import com.automaterijal.db.Keys;
import com.automaterijal.db.tables.records.ErrorLogRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ErrorLog extends TableImpl<ErrorLogRecord> {

    private static final long serialVersionUID = -1420215027;

    /**
     * The reference instance of <code>automate_orders.error_log</code>
     */
    public static final ErrorLog ERROR_LOG = new ErrorLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ErrorLogRecord> getRecordType() {
        return ErrorLogRecord.class;
    }

    /**
     * The column <code>automate_orders.error_log.eid</code>.
     */
    public final TableField<ErrorLogRecord, Integer> EID = createField(DSL.name("eid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>automate_orders.error_log.vreme</code>.
     */
    public final TableField<ErrorLogRecord, Timestamp> VREME = createField(DSL.name("vreme"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>automate_orders.error_log.compid</code>.
     */
    public final TableField<ErrorLogRecord, Integer> COMPID = createField(DSL.name("compid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>automate_orders.error_log.comp_ppid</code>.
     */
    public final TableField<ErrorLogRecord, Integer> COMP_PPID = createField(DSL.name("comp_ppid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>automate_orders.error_log.orderid</code>.
     */
    public final TableField<ErrorLogRecord, Integer> ORDERID = createField(DSL.name("orderid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>automate_orders.error_log.userid</code>.
     */
    public final TableField<ErrorLogRecord, Integer> USERID = createField(DSL.name("userid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>automate_orders.error_log.data</code>.
     */
    public final TableField<ErrorLogRecord, String> DATA = createField(DSL.name("data"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>automate_orders.error_log.err_id</code>.
     */
    public final TableField<ErrorLogRecord, Short> ERR_ID = createField(DSL.name("err_id"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>automate_orders.error_log.err_msg</code>.
     */
    public final TableField<ErrorLogRecord, String> ERR_MSG = createField(DSL.name("err_msg"), org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * Create a <code>automate_orders.error_log</code> table reference
     */
    public ErrorLog() {
        this(DSL.name("error_log"), null);
    }

    /**
     * Create an aliased <code>automate_orders.error_log</code> table reference
     */
    public ErrorLog(String alias) {
        this(DSL.name(alias), ERROR_LOG);
    }

    /**
     * Create an aliased <code>automate_orders.error_log</code> table reference
     */
    public ErrorLog(Name alias) {
        this(alias, ERROR_LOG);
    }

    private ErrorLog(Name alias, Table<ErrorLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private ErrorLog(Name alias, Table<ErrorLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ErrorLog(Table<O> child, ForeignKey<O, ErrorLogRecord> key) {
        super(child, key, ERROR_LOG);
    }

    @Override
    public Schema getSchema() {
        return AutomateOrders.AUTOMATE_ORDERS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ERROR_LOG_PRIMARY);
    }

    @Override
    public Identity<ErrorLogRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ERROR_LOG;
    }

    @Override
    public UniqueKey<ErrorLogRecord> getPrimaryKey() {
        return Keys.KEY_ERROR_LOG_PRIMARY;
    }

    @Override
    public List<UniqueKey<ErrorLogRecord>> getKeys() {
        return Arrays.<UniqueKey<ErrorLogRecord>>asList(Keys.KEY_ERROR_LOG_PRIMARY);
    }

    @Override
    public ErrorLog as(String alias) {
        return new ErrorLog(DSL.name(alias), this);
    }

    @Override
    public ErrorLog as(Name alias) {
        return new ErrorLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ErrorLog rename(String name) {
        return new ErrorLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ErrorLog rename(Name name) {
        return new ErrorLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Timestamp, Integer, Integer, Integer, Integer, String, Short, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
