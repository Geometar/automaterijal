/*
 * This file is generated by jOOQ.
 */
package com.automaterijal.db.tables;


import com.automaterijal.db.AutomateOrders;
import com.automaterijal.db.Indexes;
import com.automaterijal.db.Keys;
import com.automaterijal.db.tables.records.BrandsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Brands extends TableImpl<BrandsRecord> {

    private static final long serialVersionUID = -358750821;

    /**
     * The reference instance of <code>automate_orders.brands</code>
     */
    public static final Brands BRANDS = new Brands();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BrandsRecord> getRecordType() {
        return BrandsRecord.class;
    }

    /**
     * The column <code>automate_orders.brands.bra_id</code>.
     */
    public final TableField<BrandsRecord, Integer> BRA_ID = createField(DSL.name("bra_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>automate_orders.brands.bra_mfc_code</code>.
     */
    public final TableField<BrandsRecord, String> BRA_MFC_CODE = createField(DSL.name("bra_mfc_code"), org.jooq.impl.SQLDataType.VARCHAR(60), this, "");

    /**
     * The column <code>automate_orders.brands.bra_brand</code>.
     */
    public final TableField<BrandsRecord, String> BRA_BRAND = createField(DSL.name("bra_brand"), org.jooq.impl.SQLDataType.VARCHAR(60), this, "");

    /**
     * The column <code>automate_orders.brands.bra_mf_nr</code>.
     */
    public final TableField<BrandsRecord, Integer> BRA_MF_NR = createField(DSL.name("bra_mf_nr"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>automate_orders.brands.proid</code>.
     */
    public final TableField<BrandsRecord, String> PROID = createField(DSL.name("proid"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>automate_orders.brands.add_sufix</code>.
     */
    public final TableField<BrandsRecord, String> ADD_SUFIX = createField(DSL.name("add_sufix"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>automate_orders.brands.add_prefix</code>.
     */
    public final TableField<BrandsRecord, String> ADD_PREFIX = createField(DSL.name("add_prefix"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>automate_orders.brands.remove_char</code>.
     */
    public final TableField<BrandsRecord, String> REMOVE_CHAR = createField(DSL.name("remove_char"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>automate_orders.brands.remove_prefix</code>.
     */
    public final TableField<BrandsRecord, String> REMOVE_PREFIX = createField(DSL.name("remove_prefix"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>automate_orders.brands.remove_sufix</code>.
     */
    public final TableField<BrandsRecord, String> REMOVE_SUFIX = createField(DSL.name("remove_sufix"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>automate_orders.brands.remove_any</code>.
     */
    public final TableField<BrandsRecord, String> REMOVE_ANY = createField(DSL.name("remove_any"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>automate_orders.brands</code> table reference
     */
    public Brands() {
        this(DSL.name("brands"), null);
    }

    /**
     * Create an aliased <code>automate_orders.brands</code> table reference
     */
    public Brands(String alias) {
        this(DSL.name(alias), BRANDS);
    }

    /**
     * Create an aliased <code>automate_orders.brands</code> table reference
     */
    public Brands(Name alias) {
        this(alias, BRANDS);
    }

    private Brands(Name alias, Table<BrandsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Brands(Name alias, Table<BrandsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Brands(Table<O> child, ForeignKey<O, BrandsRecord> key) {
        super(child, key, BRANDS);
    }

    @Override
    public Schema getSchema() {
        return AutomateOrders.AUTOMATE_ORDERS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BRANDS_BRA_BRAND, Indexes.BRANDS_BRA_MC_NR, Indexes.BRANDS_BRA_MFC_CODE, Indexes.BRANDS_PRIMARY);
    }

    @Override
    public UniqueKey<BrandsRecord> getPrimaryKey() {
        return Keys.KEY_BRANDS_PRIMARY;
    }

    @Override
    public List<UniqueKey<BrandsRecord>> getKeys() {
        return Arrays.<UniqueKey<BrandsRecord>>asList(Keys.KEY_BRANDS_PRIMARY);
    }

    @Override
    public Brands as(String alias) {
        return new Brands(DSL.name(alias), this);
    }

    @Override
    public Brands as(Name alias) {
        return new Brands(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Brands rename(String name) {
        return new Brands(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Brands rename(Name name) {
        return new Brands(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, String, String, Integer, String, String, String, String, String, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
