/*
 * This file is generated by jOOQ.
 */
package com.automaterijal.db.tables;


import com.automaterijal.db.AutomateOrders;
import com.automaterijal.db.Indexes;
import com.automaterijal.db.Keys;
import com.automaterijal.db.tables.records.RobaGkRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RobaGk extends TableImpl<RobaGkRecord> {

    private static final long serialVersionUID = -1613965490;

    /**
     * The reference instance of <code>automate_orders.roba_gk</code>
     */
    public static final RobaGk ROBA_GK = new RobaGk();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RobaGkRecord> getRecordType() {
        return RobaGkRecord.class;
    }

    /**
     * The column <code>automate_orders.roba_gk.robaid</code>.
     */
    public final TableField<RobaGkRecord, Integer> ROBAID = createField(DSL.name("robaid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>automate_orders.roba_gk.gkid</code>.
     */
    public final TableField<RobaGkRecord, String> GKID = createField(DSL.name("gkid"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * Create a <code>automate_orders.roba_gk</code> table reference
     */
    public RobaGk() {
        this(DSL.name("roba_gk"), null);
    }

    /**
     * Create an aliased <code>automate_orders.roba_gk</code> table reference
     */
    public RobaGk(String alias) {
        this(DSL.name(alias), ROBA_GK);
    }

    /**
     * Create an aliased <code>automate_orders.roba_gk</code> table reference
     */
    public RobaGk(Name alias) {
        this(alias, ROBA_GK);
    }

    private RobaGk(Name alias, Table<RobaGkRecord> aliased) {
        this(alias, aliased, null);
    }

    private RobaGk(Name alias, Table<RobaGkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> RobaGk(Table<O> child, ForeignKey<O, RobaGkRecord> key) {
        super(child, key, ROBA_GK);
    }

    @Override
    public Schema getSchema() {
        return AutomateOrders.AUTOMATE_ORDERS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ROBA_GK_PRIMARY);
    }

    @Override
    public UniqueKey<RobaGkRecord> getPrimaryKey() {
        return Keys.KEY_ROBA_GK_PRIMARY;
    }

    @Override
    public List<UniqueKey<RobaGkRecord>> getKeys() {
        return Arrays.<UniqueKey<RobaGkRecord>>asList(Keys.KEY_ROBA_GK_PRIMARY);
    }

    @Override
    public RobaGk as(String alias) {
        return new RobaGk(DSL.name(alias), this);
    }

    @Override
    public RobaGk as(Name alias) {
        return new RobaGk(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RobaGk rename(String name) {
        return new RobaGk(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RobaGk rename(Name name) {
        return new RobaGk(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
