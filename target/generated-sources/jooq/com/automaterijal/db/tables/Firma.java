/*
 * This file is generated by jOOQ.
 */
package com.automaterijal.db.tables;


import com.automaterijal.db.AutomateOrders;
import com.automaterijal.db.Indexes;
import com.automaterijal.db.Keys;
import com.automaterijal.db.tables.records.FirmaRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Firma extends TableImpl<FirmaRecord> {

    private static final long serialVersionUID = 573876695;

    /**
     * The reference instance of <code>automate_orders.firma</code>
     */
    public static final Firma FIRMA = new Firma();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FirmaRecord> getRecordType() {
        return FirmaRecord.class;
    }

    /**
     * The column <code>automate_orders.firma.id</code>.
     */
    public final TableField<FirmaRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>automate_orders.firma.mesto</code>.
     */
    public final TableField<FirmaRecord, String> MESTO = createField(DSL.name("mesto"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>automate_orders.firma.ime</code>.
     */
    public final TableField<FirmaRecord, String> IME = createField(DSL.name("ime"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>automate_orders.firma.adresa</code>.
     */
    public final TableField<FirmaRecord, String> ADRESA = createField(DSL.name("adresa"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>automate_orders.firma.kontakt</code>.
     */
    public final TableField<FirmaRecord, String> KONTAKT = createField(DSL.name("kontakt"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>automate_orders.firma.sektor</code>.
     */
    public final TableField<FirmaRecord, String> SEKTOR = createField(DSL.name("sektor"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>automate_orders.firma.osnovni_asortiman</code>.
     */
    public final TableField<FirmaRecord, String> OSNOVNI_ASORTIMAN = createField(DSL.name("osnovni_asortiman"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>automate_orders.firma.konkurent</code>.
     */
    public final TableField<FirmaRecord, String> KONKURENT = createField(DSL.name("konkurent"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>automate_orders.firma.ppid</code>.
     */
    public final TableField<FirmaRecord, Integer> PPID = createField(DSL.name("ppid"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>automate_orders.firma</code> table reference
     */
    public Firma() {
        this(DSL.name("firma"), null);
    }

    /**
     * Create an aliased <code>automate_orders.firma</code> table reference
     */
    public Firma(String alias) {
        this(DSL.name(alias), FIRMA);
    }

    /**
     * Create an aliased <code>automate_orders.firma</code> table reference
     */
    public Firma(Name alias) {
        this(alias, FIRMA);
    }

    private Firma(Name alias, Table<FirmaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Firma(Name alias, Table<FirmaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Firma(Table<O> child, ForeignKey<O, FirmaRecord> key) {
        super(child, key, FIRMA);
    }

    @Override
    public Schema getSchema() {
        return AutomateOrders.AUTOMATE_ORDERS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FIRMA_PRIMARY);
    }

    @Override
    public Identity<FirmaRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FIRMA;
    }

    @Override
    public UniqueKey<FirmaRecord> getPrimaryKey() {
        return Keys.KEY_FIRMA_PRIMARY;
    }

    @Override
    public List<UniqueKey<FirmaRecord>> getKeys() {
        return Arrays.<UniqueKey<FirmaRecord>>asList(Keys.KEY_FIRMA_PRIMARY);
    }

    @Override
    public Firma as(String alias) {
        return new Firma(DSL.name(alias), this);
    }

    @Override
    public Firma as(Name alias) {
        return new Firma(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Firma rename(String name) {
        return new Firma(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Firma rename(Name name) {
        return new Firma(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, String, String, String, String, String, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
