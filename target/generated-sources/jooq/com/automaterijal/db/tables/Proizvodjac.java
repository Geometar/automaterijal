/*
 * This file is generated by jOOQ.
 */
package com.automaterijal.db.tables;


import com.automaterijal.db.AutomateOrders;
import com.automaterijal.db.Indexes;
import com.automaterijal.db.Keys;
import com.automaterijal.db.tables.records.ProizvodjacRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Proizvodjac extends TableImpl<ProizvodjacRecord> {

    private static final long serialVersionUID = 1918645999;

    /**
     * The reference instance of <code>automate_orders.proizvodjac</code>
     */
    public static final Proizvodjac PROIZVODJAC = new Proizvodjac();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProizvodjacRecord> getRecordType() {
        return ProizvodjacRecord.class;
    }

    /**
     * The column <code>automate_orders.proizvodjac.proid</code>.
     */
    public final TableField<ProizvodjacRecord, String> PROID = createField(DSL.name("proid"), org.jooq.impl.SQLDataType.VARCHAR(5).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>automate_orders.proizvodjac.naziv</code>.
     */
    public final TableField<ProizvodjacRecord, String> NAZIV = createField(DSL.name("naziv"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>automate_orders.proizvodjac.mi_uvozimo</code>.
     */
    public final TableField<ProizvodjacRecord, Short> MI_UVOZIMO = createField(DSL.name("mi_uvozimo"), org.jooq.impl.SQLDataType.SMALLINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * Create a <code>automate_orders.proizvodjac</code> table reference
     */
    public Proizvodjac() {
        this(DSL.name("proizvodjac"), null);
    }

    /**
     * Create an aliased <code>automate_orders.proizvodjac</code> table reference
     */
    public Proizvodjac(String alias) {
        this(DSL.name(alias), PROIZVODJAC);
    }

    /**
     * Create an aliased <code>automate_orders.proizvodjac</code> table reference
     */
    public Proizvodjac(Name alias) {
        this(alias, PROIZVODJAC);
    }

    private Proizvodjac(Name alias, Table<ProizvodjacRecord> aliased) {
        this(alias, aliased, null);
    }

    private Proizvodjac(Name alias, Table<ProizvodjacRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Proizvodjac(Table<O> child, ForeignKey<O, ProizvodjacRecord> key) {
        super(child, key, PROIZVODJAC);
    }

    @Override
    public Schema getSchema() {
        return AutomateOrders.AUTOMATE_ORDERS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROIZVODJAC_IDXNAZIV, Indexes.PROIZVODJAC_PRIMARY);
    }

    @Override
    public UniqueKey<ProizvodjacRecord> getPrimaryKey() {
        return Keys.KEY_PROIZVODJAC_PRIMARY;
    }

    @Override
    public List<UniqueKey<ProizvodjacRecord>> getKeys() {
        return Arrays.<UniqueKey<ProizvodjacRecord>>asList(Keys.KEY_PROIZVODJAC_PRIMARY);
    }

    @Override
    public Proizvodjac as(String alias) {
        return new Proizvodjac(DSL.name(alias), this);
    }

    @Override
    public Proizvodjac as(Name alias) {
        return new Proizvodjac(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Proizvodjac rename(String name) {
        return new Proizvodjac(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Proizvodjac rename(Name name) {
        return new Proizvodjac(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Short> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
