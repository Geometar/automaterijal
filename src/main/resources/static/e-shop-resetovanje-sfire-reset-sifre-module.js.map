{"version":3,"sources":["webpack:///./src/app/e-shop/resetovanje-sfire/reset-sifre.module.ts","webpack:///./src/app/e-shop/resetovanje-sfire/resetovanje-sfire.component.html","webpack:///./src/app/e-shop/resetovanje-sfire/resetovanje-sfire.component.scss","webpack:///./src/app/e-shop/resetovanje-sfire/resetovanje-sfire.component.ts"],"names":[],"mappings":"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","file":"e-shop-resetovanje-sfire-reset-sifre-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MaterialModule } from 'src/app/shared/material/material.module';\nimport { SharedMagacinModule } from '../magacin/shared-components/shared-magacin.module';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ResetovanjeSfireComponent } from './resetovanje-sfire.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ResetovanjeSfireComponent\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MaterialModule,\n    SharedMagacinModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ResetovanjeSfireComponent],\n  exports: [ResetovanjeSfireComponent]\n})\nexport class ResetSifreModule { }\n","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"flex-login\\\">\\n    <div class=\\\"login-form\\\">\\n      <h1>Promeni šifru</h1>\\n      <div class=\\\"alert alert-danger\\\" role=\\\"alert\\\" *ngIf=\\\"submitted == true && uspesnaPromena == false\\\">\\n        <p>Promena šifre nije uspela, zahtevajte ponovo poštu za resetovanje šifre.</p>\\n      </div>\\n      <form role=\\\"form\\\" [formGroup]=\\\"promenaSifreForm\\\">\\n        <div class=\\\"form-group\\\">\\n          <input type=\\\"password\\\" #pass1 formControlName=\\\"pass1\\\" class=\\\"form-control rounded\\\" placeholder=\\\"Nova šifra\\\" id=\\\"pass1\\\"\\n            name=\\\"pass1\\\" />\\n          <div *ngIf=\\\"submitted && r.pass1.errors\\\">\\n            <div *ngIf=\\\"r.pass1.errors.required\\\">\\n              <p class=\\\"upozorenje\\\">Šifra je obavezna</p>\\n            </div>\\n            <div *ngIf=\\\"r.pass1.errors.minlength\\\">\\n              <p class=\\\"upozorenje\\\">Šifra mora imati minimalno 3 karaktera</p>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <input type=\\\"password\\\" #pass2 formControlName=\\\"pass2\\\" class=\\\"form-control rounded\\\" placeholder=\\\"Ponovite šifru\\\"\\n            id=\\\"password\\\" name=\\\"password\\\" />\\n          <div *ngIf=\\\"submitted && r.pass2.errors\\\">\\n            <div *ngIf=\\\"r.pass2.errors.required\\\">\\n              <p class=\\\"upozorenje\\\">Šifra je obavezna</p>\\n            </div>\\n            <div *ngIf=\\\"r.pass2.errors.minlength\\\">\\n              <p class=\\\"upozorenje\\\">Šifra mora imati minimalno 3 karaktera</p>\\n            </div>\\n          </div>\\n          <div *ngIf=\\\"submitted && !r.pass2.errors && pass1.value != pass2.value\\\">\\n            <p class=\\\"upozorenje\\\">Šifre nisu iste</p>\\n          </div>\\n        </div>\\n        <div class=\\\"d-flex\\\">\\n          <button mat-raised-button (click)=\\\"promeniSifru()\\\" class=\\\"rounded\\\" color=\\\"primary\\\">Promeni</button>\\n        </div>\\n      </form>\\n    </div>\\n  </div>\\n</div>\"","module.exports = \".flex-login {\\n  margin-top: 10%;\\n  display: flex;\\n  justify-content: center; }\\n\\n.login-form {\\n  width: 400px;\\n  justify-content: center; }\\n\\nh1 {\\n  text-align: center;\\n  text-transform: uppercase; }\\n\\nbutton {\\n  margin: auto;\\n  display: block; }\\n\\np {\\n  text-align: center; }\\n\\n.is-invalid {\\n  border: 1px solid red; }\\n\\n.upozorenje {\\n  text-align: left;\\n  font-size: 0.8em;\\n  color: red;\\n  margin: 0px !important; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { PromenaSifre } from '../model/dto';\nimport { takeWhile, finalize, catchError } from 'rxjs/operators';\nimport { throwError, EMPTY } from 'rxjs';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { PartnerService } from '../service/partner.service';\nimport { MatSnackBar } from '@angular/material';\nimport { NotifikacijaService } from 'src/app/shared/service/notifikacija.service';\nimport { MatSnackBarKlase } from 'src/app/shared/model/konstante';\n\n@Component({\n  selector: 'app-resetovanje-sfire',\n  templateUrl: './resetovanje-sfire.component.html',\n  styleUrls: ['./resetovanje-sfire.component.scss']\n})\nexport class ResetovanjeSfireComponent implements OnInit {\n  public promenaSifreForm: FormGroup;\n  public submitted = false;\n  public uspesnoLogovanje = true;\n  private staraSifra: string;\n  private ppid: number;\n\n  public ucitavanje = false;\n  private alive = true;\n  public uspesnaPromena = true;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private partnerServis: PartnerService,\n    private notifikacijaServis: NotifikacijaService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.promenaSifreForm = this.formBuilder.group({\n      pass1: ['', [Validators.required, Validators.minLength(3)]],\n      pass2: ['', [Validators.required, Validators.minLength(3)]]\n    });\n    this.route.params.subscribe((params: Params) => {\n      this.staraSifra = params.id;\n    });\n    this.route.queryParams.subscribe((params: Params) => {\n      this.ppid = params.id;\n    });\n  }\n\n  // convenience getter for easy access to form fields\n  get r() { return this.promenaSifreForm.controls; }\n\n  promeniSifru() {\n    this.submitted = true;\n    // stop here if form is invalid\n    if (this.promenaSifreForm.invalid || this.r.pass1.value !== this.r.pass2.value) {\n      return;\n    }\n    const dto = this.napraviDto();\n    this.partnerServis.promeniSifru(dto, false).pipe(\n      takeWhile(() => this.alive),\n      catchError((error: Response) => {\n        if (error.status === 400) {\n          this.uspesnaPromena = false;\n          return EMPTY;\n        }\n        return throwError(error);\n      }),\n      finalize(() => this.ucitavanje = false)\n    )\n    .subscribe(\n      res => {\n        this.uspesnaPromena = true;\n        this.notifikacijaServis.notify('Šifra uspešno promenjena', MatSnackBarKlase.Zelena);\n        this.router.navigate(['/login']);\n      },\n      error => {\n        this.uspesnaPromena = false;\n      });\n  }\n\n  private napraviDto(): PromenaSifre {\n    const dto = new PromenaSifre();\n    dto.sifra = this.r.pass1.value;\n    dto.ponovljenjaSifra = this.r.pass2.value;\n    dto.ppid = this.ppid;\n    dto.staraSifra = this.staraSifra;\n    return dto;\n  }\n}\n"],"sourceRoot":""}